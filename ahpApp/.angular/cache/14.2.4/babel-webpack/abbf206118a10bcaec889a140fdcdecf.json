{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/autocomplete\";\nimport * as i4 from \"@angular/material/core\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/button\";\n\nfunction DecisionComponent_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r2.name, \" \");\n  }\n}\n\nexport class DecisionComponent {\n  constructor() {\n    this.myControl = new FormControl('');\n    this.options = [{\n      name: 'John Stuart'\n    }, {\n      name: 'Jeff Bezos'\n    }, {\n      name: 'Igor Lound'\n    }];\n  }\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => {\n      const name = typeof value === 'string' ? value : value?.name;\n      return name ? this._filter(name) : this.options.slice();\n    }));\n  }\n\n  displayFn(user) {\n    console.log(user);\n    return user && user.name ? user.name : '';\n  }\n\n  _filter(name) {\n    const filterValue = name.toLowerCase();\n    return this.options.filter(option => option.name.toLowerCase().includes(filterValue));\n  }\n\n}\n\nDecisionComponent.ɵfac = function DecisionComponent_Factory(t) {\n  return new (t || DecisionComponent)();\n};\n\nDecisionComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DecisionComponent,\n  selectors: [[\"decision-component\"]],\n  decls: 16,\n  vars: 6,\n  consts: [[1, \"decision-container\"], [1, \"participants\"], [1, \"add-participants-span\"], [\"mat-raised-button\", \"\", 1, \"add-button\"], [1, \"participants-form\"], [1, \"participants-full-width\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [3, \"displayWith\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function DecisionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\", 2)(3, \"h3\");\n      i0.ɵɵtext(4, \"Select the names of the participants in the decision:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵtext(6, \"Add participants\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"form\", 4)(8, \"mat-form-field\", 5)(9, \"mat-label\");\n      i0.ɵɵtext(10, \"Participants\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 6);\n      i0.ɵɵelementStart(12, \"mat-autocomplete\", 7, 8);\n      i0.ɵɵtemplate(14, DecisionComponent_mat_option_14_Template, 2, 2, \"mat-option\", 9);\n      i0.ɵɵpipe(15, \"async\");\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(13);\n\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"displayWith\", ctx.displayFn);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(15, 4, ctx.filteredOptions));\n    }\n  },\n  dependencies: [i1.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgForm, i2.FormControlDirective, i3.MatAutocomplete, i3.MatAutocompleteTrigger, i4.MatOption, i5.MatFormField, i5.MatLabel, i6.MatInput, i7.MatButton, i1.AsyncPipe],\n  styles: [\".participants[_ngcontent-%COMP%] {\\n  margin: 20px;\\n  margin-top: 60px;\\n}\\n.participants[_ngcontent-%COMP%]   .participants-form[_ngcontent-%COMP%] {\\n  min-width: 150px;\\n  max-width: 500px;\\n  width: 100%;\\n}\\n.participants[_ngcontent-%COMP%]   .participants-full-width[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY2lzaW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0FBQ0Y7QUFDRTtFQUNFLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0FBQ0o7QUFFRTtFQUNFLFdBQUE7QUFBSiIsImZpbGUiOiJkZWNpc2lvbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wYXJ0aWNpcGFudHMge1xyXG4gIG1hcmdpbjogMjBweDtcclxuICBtYXJnaW4tdG9wOiA2MHB4O1xyXG5cclxuICAucGFydGljaXBhbnRzLWZvcm0ge1xyXG4gICAgbWluLXdpZHRoOiAxNTBweDtcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcblxyXG4gIC5wYXJ0aWNpcGFudHMtZnVsbC13aWR0aCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,gBAA5B;AAEA,SAASC,GAAT,EAAcC,SAAd,QAA+B,gBAA/B;;;;;;;;;;;;ICaUC;IAIEA;IACFA;;;;;IAHEA;IAEAA;IAAAA;;;;ADNZ,OAAM,MAAOC,iBAAP,CAAwB;EAL9BC;IAME,iBAAY,IAAIL,WAAJ,CAAsC,EAAtC,CAAZ;IACA,eAAyB,CACvB;MAAEM,IAAI,EAAE;IAAR,CADuB,EAEvB;MAAEA,IAAI,EAAE;IAAR,CAFuB,EAGvB;MAAEA,IAAI,EAAE;IAAR,CAHuB,CAAzB;EA6BD;;EAtBCC,QAAQ;IACN,KAAKC,eAAL,GAAuB,KAAKC,SAAL,CAAeC,YAAf,CAA4BC,IAA5B,CACrBT,SAAS,CAAC,EAAD,CADY,EAErBD,GAAG,CAAEW,KAAD,IAAU;MACZ,MAAMN,IAAI,GAAG,OAAOM,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,EAAEN,IAAxD;MACA,OAAOA,IAAI,GAAG,KAAKO,OAAL,CAAaP,IAAb,CAAH,GAAkC,KAAKQ,OAAL,CAAaC,KAAb,EAA7C;IACD,CAHE,CAFkB,CAAvB;EAOD;;EAEDC,SAAS,CAACC,IAAD,EAAkB;IACzBC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACA,OAAOA,IAAI,IAAIA,IAAI,CAACX,IAAb,GAAoBW,IAAI,CAACX,IAAzB,GAAgC,EAAvC;EACD;;EAEOO,OAAO,CAACP,IAAD,EAAa;IAC1B,MAAMc,WAAW,GAAGd,IAAI,CAACe,WAAL,EAApB;IAEA,OAAO,KAAKP,OAAL,CAAaQ,MAAb,CAAqBC,MAAD,IACzBA,MAAM,CAACjB,IAAP,CAAYe,WAAZ,GAA0BG,QAA1B,CAAmCJ,WAAnC,CADK,CAAP;EAGD;;AA9B2B;;;mBAAjBhB;AAAiB;;;QAAjBA;EAAiBqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCd9B1B,+BAAgC,CAAhC,EAAgC,KAAhC,EAAgC,CAAhC,EAAgC,CAAhC,EAAgC,MAAhC,EAAgC,CAAhC,EAAgC,CAAhC,EAAgC,IAAhC;MAGUA;MAAqDA;MACzDA;MAA6CA;MAAgBA;MAE/DA,gCAAgC,CAAhC,EAAgC,gBAAhC,EAAgC,CAAhC,EAAgC,CAAhC,EAAgC,WAAhC;MAEeA;MAAYA;MACvBA;MAMAA;MACEA;;MAMFA;;;;;;MAVEA;MAAAA,4CAAyB,iBAAzB,EAAyB2B,GAAzB;MAGwC3B;MAAAA;MAEnBA;MAAAA","names":["FormControl","map","startWith","i0","DecisionComponent","constructor","name","ngOnInit","filteredOptions","myControl","valueChanges","pipe","value","_filter","options","slice","displayFn","user","console","log","filterValue","toLowerCase","filter","option","includes","selectors","decls","vars","consts","template","_r0"],"sourceRoot":"","sources":["C:\\ahp-project\\ahpApp\\src\\app\\components\\decision\\decision.component.ts","C:\\ahp-project\\ahpApp\\src\\app\\components\\decision\\decision.component.html"],"sourcesContent":["import { Component, OnInit, Optional } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\nexport interface Participant {\n  name: string;\n}\n\n@Component({\n  selector: 'decision-component',\n  templateUrl: './decision.component.html',\n  styleUrls: ['./decision.component.scss'],\n})\nexport class DecisionComponent implements OnInit {\n  myControl = new FormControl<string | Participant>('');\n  options: Participant[] = [\n    { name: 'John Stuart' },\n    { name: 'Jeff Bezos' },\n    { name: 'Igor Lound' },\n  ];\n  filteredOptions?: Observable<Participant[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((value) => {\n        const name = typeof value === 'string' ? value : value?.name;\n        return name ? this._filter(name as string) : this.options.slice();\n      })\n    );\n  }\n\n  displayFn(user: Participant): string {\n    console.log(user);\n    return user && user.name ? user.name : '';\n  }\n\n  private _filter(name: string): Participant[] {\n    const filterValue = name.toLowerCase();\n\n    return this.options.filter((option) =>\n      option.name.toLowerCase().includes(filterValue)\n    );\n  }\n}\n","<div class=\"decision-container\">\n  <div class=\"participants\">\n    <span class=\"add-participants-span\">\n      <h3>Select the names of the participants in the decision:</h3>\n      <button class=\"add-button\" mat-raised-button>Add participants</button>\n    </span>\n    <form class=\"participants-form\">\n      <mat-form-field class=\"participants-full-width\">\n        <mat-label>Participants</mat-label>\n        <input\n          type=\"text\"\n          matInput\n          [formControl]=\"myControl\"\n          [matAutocomplete]=\"auto\"\n        />\n        <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n          <mat-option\n            *ngFor=\"let option of filteredOptions | async\"\n            [value]=\"option\"\n          >\n            {{ option.name }}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}