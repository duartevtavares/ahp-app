{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { startWith, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/autocomplete\";\nimport * as i5 from \"@angular/material/core\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\n\nfunction ParticipantsDialogComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r2.name, \" \");\n  }\n}\n\nexport class ParticipantsDialogComponent {\n  constructor(dialogRef, data) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.myControl = new FormControl('');\n    this.options = [{\n      name: 'John Stuart'\n    }, {\n      name: 'Jeff Bezos'\n    }, {\n      name: 'Igor Lound'\n    }];\n  }\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => {\n      const name = typeof value === 'string' ? value : value?.name;\n      return name ? this._filter(name) : this.options.slice();\n    }));\n  }\n\n  displayFn(user) {\n    console.log(user);\n    return user && user.name ? user.name : '';\n  }\n\n  _filter(name) {\n    const filterValue = name.toLowerCase();\n    return this.options.filter(option => option.name.toLowerCase().includes(filterValue));\n  }\n\n  onNoClick() {\n    this.dialogRef.close();\n  }\n\n}\n\nParticipantsDialogComponent.ɵfac = function ParticipantsDialogComponent_Factory(t) {\n  return new (t || ParticipantsDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\n\nParticipantsDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ParticipantsDialogComponent,\n  selectors: [[\"participants-dialog-component\"]],\n  decls: 18,\n  vars: 6,\n  consts: [[\"mat-dialog-content\", \"\", 1, \"mat-dialog\"], [1, \"title\"], [\"appearance\", \"fill\", 1, \"participants-full-width\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-dialog-actions\"], [\"mat-raised-button\", \"\", \"mat-dialog-close\", \"\"], [\"mat-raised-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\"], [3, \"value\"]],\n  template: function ParticipantsDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\", 1);\n      i0.ɵɵtext(2, \"Insert a participant from your organization:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-form-field\", 2)(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Available participants\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementStart(7, \"mat-autocomplete\", null, 4);\n      i0.ɵɵtemplate(9, ParticipantsDialogComponent_mat_option_9_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"div\", 6)(12, \"div\")(13, \"button\", 7);\n      i0.ɵɵtext(14, \"Close\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\")(16, \"button\", 8);\n      i0.ɵɵtext(17, \" Ok \");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(8);\n\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(10, 4, ctx.filteredOptions));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"mat-dialog-close\", ctx.data.name);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i4.MatAutocomplete, i4.MatAutocompleteTrigger, i5.MatOption, i6.MatFormField, i6.MatLabel, i7.MatInput, i8.MatButton, i1.MatDialogClose, i1.MatDialogContent, i2.AsyncPipe],\n  styles: [\".mat-dialog[_ngcontent-%COMP%] {\\n  width: 500px;\\n  height: 120px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-evenly;\\n}\\n\\n.mat-dialog-actions[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: flex-end;\\n  gap: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnRpY2lwYW50cy1kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFBO0VBQ0EsYUFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLDZCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLFNBQUE7QUFDRiIsImZpbGUiOiJwYXJ0aWNpcGFudHMtZGlhbG9nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1kaWFsb2cge1xyXG4gIHdpZHRoOiA1MDBweDtcclxuICBoZWlnaHQ6IDEyMHB4O1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcclxufVxyXG5cclxuLm1hdC1kaWFsb2ctYWN0aW9ucyB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgZ2FwOiAxMHB4O1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAAuBC,eAAvB,QAA8C,0BAA9C;AACA,SAAqBC,SAArB,EAAgCC,GAAhC,QAA2C,MAA3C;;;;;;;;;;;;;ICQMC;IAIEA;IACFA;;;;;IAHEA;IAEAA;IAAAA;;;;ADJR,OAAM,MAAOC,2BAAP,CAAkC;EACtCC,YACSC,SADT,EAEkCC,IAFlC,EAEkD;IADzC;IACyB;IAGlC,iBAAY,IAAIR,WAAJ,CAAsC,EAAtC,CAAZ;IACA,eAAyB,CACvB;MAAES,IAAI,EAAE;IAAR,CADuB,EAEvB;MAAEA,IAAI,EAAE;IAAR,CAFuB,EAGvB;MAAEA,IAAI,EAAE;IAAR,CAHuB,CAAzB;EAHI;;EAUJC,QAAQ;IACN,KAAKC,eAAL,GAAuB,KAAKC,SAAL,CAAeC,YAAf,CAA4BC,IAA5B,CACrBZ,SAAS,CAAC,EAAD,CADY,EAErBC,GAAG,CAAEY,KAAD,IAAU;MACZ,MAAMN,IAAI,GAAG,OAAOM,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,EAAEN,IAAxD;MACA,OAAOA,IAAI,GAAG,KAAKO,OAAL,CAAaP,IAAb,CAAH,GAAkC,KAAKQ,OAAL,CAAaC,KAAb,EAA7C;IACD,CAHE,CAFkB,CAAvB;EAOD;;EAEDC,SAAS,CAACC,IAAD,EAAkB;IACzBC,OAAO,CAACC,GAAR,CAAYF,IAAZ;IACA,OAAOA,IAAI,IAAIA,IAAI,CAACX,IAAb,GAAoBW,IAAI,CAACX,IAAzB,GAAgC,EAAvC;EACD;;EAEOO,OAAO,CAACP,IAAD,EAAa;IAC1B,MAAMc,WAAW,GAAGd,IAAI,CAACe,WAAL,EAApB;IAEA,OAAO,KAAKP,OAAL,CAAaQ,MAAb,CAAqBC,MAAD,IACzBA,MAAM,CAACjB,IAAP,CAAYe,WAAZ,GAA0BG,QAA1B,CAAmCJ,WAAnC,CADK,CAAP;EAGD;;EAEDK,SAAS;IACP,KAAKrB,SAAL,CAAesB,KAAf;EACD;;AAvCqC;;;mBAA3BxB,6BAA2BD,4DAG5BH,eAH4B;AAGb;;;QAHdI;EAA2ByB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXxC9B,+BAA2C,CAA3C,EAA2C,GAA3C,EAA2C,CAA3C;MACmBA;MAA4CA;MAC7DA,0CAAkE,CAAlE,EAAkE,WAAlE;MACaA;MAAsBA;MACjCA;MAMAA;MACEA;;MAMFA;MAIJA,gCAAgC,EAAhC,EAAgC,KAAhC,EAAgC,EAAhC,EAAgC,QAAhC,EAAgC,CAAhC;MACkDA;MAAKA;MACrDA,6BAAK,EAAL,EAAK,QAAL,EAAK,CAAL;MAEIA;MACFA;;;;;;MAnBEA;MAAAA,4CAAyB,iBAAzB,EAAyB+B,GAAzB;MAKqB/B;MAAAA;MAYGA;MAAAA","names":["FormControl","MAT_DIALOG_DATA","startWith","map","i0","ParticipantsDialogComponent","constructor","dialogRef","data","name","ngOnInit","filteredOptions","myControl","valueChanges","pipe","value","_filter","options","slice","displayFn","user","console","log","filterValue","toLowerCase","filter","option","includes","onNoClick","close","selectors","decls","vars","consts","template","_r0"],"sourceRoot":"","sources":["C:\\ahp-project\\ahpApp\\src\\app\\components\\decision\\participants-dialog\\participants-dialog.component.ts","C:\\ahp-project\\ahpApp\\src\\app\\components\\decision\\participants-dialog\\participants-dialog.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable, startWith, map } from 'rxjs';\nimport { DialogData, Participant } from '../decision.component';\n\n@Component({\n  selector: 'participants-dialog-component',\n  templateUrl: './participants-dialog.component.html',\n  styleUrls: ['./participants-dialog.component.scss'],\n})\nexport class ParticipantsDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<ParticipantsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {}\n\n  myControl = new FormControl<string | Participant>('');\n  options: Participant[] = [\n    { name: 'John Stuart' },\n    { name: 'Jeff Bezos' },\n    { name: 'Igor Lound' },\n  ];\n  filteredOptions?: Observable<Participant[]>;\n\n  ngOnInit() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((value) => {\n        const name = typeof value === 'string' ? value : value?.name;\n        return name ? this._filter(name as string) : this.options.slice();\n      })\n    );\n  }\n\n  displayFn(user: Participant): string {\n    console.log(user);\n    return user && user.name ? user.name : '';\n  }\n\n  private _filter(name: string): Participant[] {\n    const filterValue = name.toLowerCase();\n\n    return this.options.filter((option) =>\n      option.name.toLowerCase().includes(filterValue)\n    );\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n","<div mat-dialog-content class=\"mat-dialog\">\n  <p class=\"title\">Insert a participant from your organization:</p>\n  <mat-form-field class=\"participants-full-width\" appearance=\"fill\">\n    <mat-label>Available participants</mat-label>\n    <input\n      type=\"text\"\n      matInput\n      [formControl]=\"myControl\"\n      [matAutocomplete]=\"auto\"\n    />\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      <mat-option\n        *ngFor=\"let option of filteredOptions | async\"\n        [value]=\"option\"\n      >\n        {{ option.name }}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</div>\n\n<div class=\"mat-dialog-actions\">\n  <div><button mat-raised-button mat-dialog-close>Close</button></div>\n  <div>\n    <button mat-raised-button [mat-dialog-close]=\"data.name\" cdkFocusInitial>\n      Ok\n    </button>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}