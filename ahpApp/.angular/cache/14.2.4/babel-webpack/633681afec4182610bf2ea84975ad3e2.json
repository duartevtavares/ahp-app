{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { startWith, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/services/api.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/autocomplete\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\n\nfunction ParticipantsDialogComponent_mat_option_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r3.name, \" \");\n  }\n}\n\nexport class ParticipantsDialogComponent {\n  constructor(dialogRef, data, service) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.service = service;\n    this.myControl = new FormControl('');\n    this.options = [];\n  }\n\n  ngOnInit() {\n    this.service.getParticipants().subscribe(response => {\n      this.options = response;\n    }, error => {\n      console.log('erro', error);\n    });\n    this.filteredOptions = this.myControl.valueChanges.pipe(startWith(''), map(value => {\n      const name = typeof value === 'string' ? value : value?.name;\n      return name ? this._filter(name) : this.options;\n    }));\n  }\n\n  displayFn(participantName) {\n    return participantName && participantName.name ? participantName.name : '';\n  }\n\n  _filter(name) {\n    const filterValue = name.toLowerCase();\n    return this.options.filter(option => option.name.toLowerCase().includes(filterValue));\n  }\n\n  postParticipant(participantName) {\n    this.service.postParticipant(participantName).subscribe(res => console.log(res));\n    this.service.getParticipants().subscribe(res => console.log(res));\n  }\n\n  onCancel() {\n    this.dialogRef.close();\n  }\n\n}\n\nParticipantsDialogComponent.ɵfac = function ParticipantsDialogComponent_Factory(t) {\n  return new (t || ParticipantsDialogComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.ApiService));\n};\n\nParticipantsDialogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ParticipantsDialogComponent,\n  selectors: [[\"participants-dialog-component\"]],\n  decls: 19,\n  vars: 7,\n  consts: [[\"mat-dialog-content\", \"\", 1, \"mat-dialog\"], [1, \"title\"], [\"appearance\", \"fill\", 1, \"participants-full-width\"], [\"type\", \"text\", \"matInput\", \"\", 3, \"formControl\", \"matAutocomplete\"], [\"input\", \"\"], [3, \"displayWith\"], [\"auto\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"mat-dialog-actions\"], [\"mat-raised-button\", \"\", \"mat-dialog-close\", \"\", 3, \"click\"], [\"mat-raised-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\", \"click\"], [3, \"value\"]],\n  template: function ParticipantsDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r4 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"p\", 1);\n      i0.ɵɵtext(2, \"Insert a participant from your organization:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-form-field\", 2)(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Available participants\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3, 4);\n      i0.ɵɵelementStart(8, \"mat-autocomplete\", 5, 6);\n      i0.ɵɵtemplate(10, ParticipantsDialogComponent_mat_option_10_Template, 2, 2, \"mat-option\", 7);\n      i0.ɵɵpipe(11, \"async\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"div\", 8)(13, \"div\")(14, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function ParticipantsDialogComponent_Template_button_click_14_listener() {\n        return ctx.onCancel();\n      });\n      i0.ɵɵtext(15, \" Close \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\")(17, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function ParticipantsDialogComponent_Template_button_click_17_listener() {\n        i0.ɵɵrestoreView(_r4);\n\n        const _r0 = i0.ɵɵreference(7);\n\n        return i0.ɵɵresetView(ctx.postParticipant(_r0.value));\n      });\n      i0.ɵɵtext(18, \" Ok \");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(9);\n\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formControl\", ctx.myControl)(\"matAutocomplete\", _r1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"displayWith\", ctx.displayFn);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(11, 5, ctx.filteredOptions));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"mat-dialog-close\", ctx.data.name);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i5.MatAutocomplete, i5.MatAutocompleteTrigger, i6.MatOption, i7.MatFormField, i7.MatLabel, i8.MatInput, i9.MatButton, i1.MatDialogClose, i1.MatDialogContent, i3.AsyncPipe],\n  styles: [\".mat-dialog[_ngcontent-%COMP%] {\\n  max-width: 500px;\\n  height: 120px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-evenly;\\n}\\n\\n.mat-dialog-actions[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: flex-end;\\n  gap: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnRpY2lwYW50cy1kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSw2QkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EseUJBQUE7RUFDQSxTQUFBO0FBQ0YiLCJmaWxlIjoicGFydGljaXBhbnRzLWRpYWxvZy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5tYXQtZGlhbG9nIHtcclxuICBtYXgtd2lkdGg6IDUwMHB4O1xyXG4gIGhlaWdodDogMTIwcHg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG59XHJcblxyXG4ubWF0LWRpYWxvZy1hY3Rpb25zIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICBnYXA6IDEwcHg7XHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAT,QAA4B,gBAA5B;AACA,SAAuBC,eAAvB,QAA8C,0BAA9C;AACA,SAAqBC,SAArB,EAAgCC,GAAhC,QAA2C,MAA3C;;;;;;;;;;;;;;ICSMC;IAIEA;IACFA;;;;;IAHEA;IAEAA;IAAAA;;;;ADJR,OAAM,MAAOC,2BAAP,CAAkC;EACtCC,YACSC,SADT,EAEkCC,IAFlC,EAGUC,OAHV,EAG6B;IAFpB;IACyB;IACxB;IAGV,iBAAY,IAAIT,WAAJ,CAAqC,EAArC,CAAZ;IACA,eAAU,EAAV;EAHI;;EAMJU,QAAQ;IACN,KAAKD,OAAL,CAAaE,eAAb,GAA+BC,SAA/B,CACGC,QAAD,IAAa;MACX,KAAKC,OAAL,GAAeD,QAAf;IACD,CAHH,EAIGE,KAAD,IAAU;MACRC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,KAApB;IACD,CANH;IASA,KAAKG,eAAL,GAAuB,KAAKC,SAAL,CAAeC,YAAf,CAA4BC,IAA5B,CACrBnB,SAAS,CAAC,EAAD,CADY,EAErBC,GAAG,CAAEmB,KAAD,IAAU;MACZ,MAAMC,IAAI,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,EAAEC,IAAxD;MACA,OAAOA,IAAI,GAAG,KAAKC,OAAL,CAAaD,IAAb,CAAH,GAAkC,KAAKT,OAAlD;IACD,CAHE,CAFkB,CAAvB;EAOD;;EAEDW,SAAS,CAACC,eAAD,EAA4B;IACnC,OAAOA,eAAe,IAAIA,eAAe,CAACH,IAAnC,GAA0CG,eAAe,CAACH,IAA1D,GAAiE,EAAxE;EACD;;EAEOC,OAAO,CAACD,IAAD,EAAa;IAC1B,MAAMI,WAAW,GAAGJ,IAAI,CAACK,WAAL,EAApB;IAEA,OAAO,KAAKd,OAAL,CAAae,MAAb,CAAqBC,MAAD,IACzBA,MAAM,CAACP,IAAP,CAAYK,WAAZ,GAA0BG,QAA1B,CAAmCJ,WAAnC,CADK,CAAP;EAGD;;EAEDK,eAAe,CAACN,eAAD,EAAqB;IAClC,KAAKjB,OAAL,CACGuB,eADH,CACmBN,eADnB,EAEGd,SAFH,CAEcqB,GAAD,IAASjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CAFtB;IAGA,KAAKxB,OAAL,CAAaE,eAAb,GAA+BC,SAA/B,CAA0CqB,GAAD,IAASjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ,CAAlD;EACD;;EAEDC,QAAQ;IACN,KAAK3B,SAAL,CAAe4B,KAAf;EACD;;AAnDqC;;;mBAA3B9B,6BAA2BD,4DAG5BH,eAH4B,GAGbG;AAAA;;;QAHdC;EAA2B+B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;;MCZxCpC,+BAA2C,CAA3C,EAA2C,GAA3C,EAA2C,CAA3C;MACmBA;MAA4CA;MAC7DA,0CAAkE,CAAlE,EAAkE,WAAlE;MACaA;MAAsBA;MACjCA;MAOAA;MACEA;;MAMFA;MAIJA,gCAAgC,EAAhC,EAAgC,KAAhC,EAAgC,EAAhC,EAAgC,QAAhC,EAAgC,CAAhC;MAE8BA;QAAA,OAASqC,cAAT;MAAmB,CAAnB;MACxBrC;MACFA;MAEFA,6BAAK,EAAL,EAAK,QAAL,EAAK,EAAL;MAKIA;QAAAA;;QAAA;;QAAA,OAASA,8CAAT;MAAqC,CAArC;MAEAA;MACFA;;;;;;MA7BEA;MAAAA,4CAAyB,iBAAzB,EAAyBsC,GAAzB;MAIwCtC;MAAAA;MAEnBA;MAAAA;MAkBrBA;MAAAA","names":["FormControl","MAT_DIALOG_DATA","startWith","map","i0","ParticipantsDialogComponent","constructor","dialogRef","data","service","ngOnInit","getParticipants","subscribe","response","options","error","console","log","filteredOptions","myControl","valueChanges","pipe","value","name","_filter","displayFn","participantName","filterValue","toLowerCase","filter","option","includes","postParticipant","res","onCancel","close","selectors","decls","vars","consts","template","ctx","_r1"],"sourceRoot":"","sources":["C:\\ahp-project\\ahpApp\\src\\app\\components\\decision\\participants-dialog\\participants-dialog.component.ts","C:\\ahp-project\\ahpApp\\src\\app\\components\\decision\\participants-dialog\\participants-dialog.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable, startWith, map } from 'rxjs';\nimport { ApiService } from 'src/app/services/api.service';\nimport { DialogData } from '../decision.component';\n\n@Component({\n  selector: 'participants-dialog-component',\n  templateUrl: './participants-dialog.component.html',\n  styleUrls: ['./participants-dialog.component.scss'],\n})\nexport class ParticipantsDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: MatDialogRef<ParticipantsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private service: ApiService\n  ) {}\n\n  myControl = new FormControl<string | DialogData>('');\n  options = [];\n  filteredOptions?: Observable<any>;\n\n  ngOnInit() {\n    this.service.getParticipants().subscribe(\n      (response) => {\n        this.options = response;\n      },\n      (error) => {\n        console.log('erro', error);\n      }\n    );\n\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map((value) => {\n        const name = typeof value === 'string' ? value : value?.name;\n        return name ? this._filter(name as string) : this.options;\n      })\n    );\n  }\n\n  displayFn(participantName: DialogData): string {\n    return participantName && participantName.name ? participantName.name : '';\n  }\n\n  private _filter(name: string): DialogData[] {\n    const filterValue = name.toLowerCase();\n\n    return this.options.filter((option: any) =>\n      option.name.toLowerCase().includes(filterValue)\n    );\n  }\n\n  postParticipant(participantName: any) {\n    this.service\n      .postParticipant(participantName)\n      .subscribe((res) => console.log(res));\n    this.service.getParticipants().subscribe((res) => console.log(res));\n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","<div mat-dialog-content class=\"mat-dialog\">\n  <p class=\"title\">Insert a participant from your organization:</p>\n  <mat-form-field class=\"participants-full-width\" appearance=\"fill\">\n    <mat-label>Available participants</mat-label>\n    <input\n      type=\"text\"\n      matInput\n      [formControl]=\"myControl\"\n      [matAutocomplete]=\"auto\"\n      #input\n    />\n    <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n      <mat-option\n        *ngFor=\"let option of filteredOptions | async\"\n        [value]=\"option\"\n      >\n        {{ option.name }}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n</div>\n\n<div class=\"mat-dialog-actions\">\n  <div>\n    <button mat-raised-button (click)=\"onCancel()\" mat-dialog-close>\n      Close\n    </button>\n  </div>\n  <div>\n    <button\n      mat-raised-button\n      [mat-dialog-close]=\"data.name\"\n      cdkFocusInitial\n      (click)=\"postParticipant(input.value)\"\n    >\n      Ok\n    </button>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}